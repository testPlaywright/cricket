// cypress.config.js
const { defineConfig } = require('cypress');
const fs = require('fs');
const path = require('path');
const ExcelJS = require('exceljs');
const cucumber = require('cypress-cucumber-preprocessor').default;

const { queryDb } = require('./cypress/plugins/ConnectDB.cjs');

// NOTE: adjust this path if your builder file lives elsewhere
const { makeTemplate58FromScratch, appendRows58 } = require('./src/templateBuilder.js');

// load env json (optional)
const envJson = JSON.parse(fs.readFileSync('cypress.env.json', 'utf-8'));

module.exports = defineConfig({
  defaultCommandTimeout: 300000,
  reporter: 'cypress-mochawesome-reporter',
  reporterOptions: {
    charts: true,
    json: true,
    saveJson: true,
    reportDir: process.env.REPORT_PATH,
    overwrite: false,
    reportFilename: 'index',
    reportPageTitle: 'CAT Automation Report',
    reportTitle: 'CAT Automation Regression Report',
    inlineAssets: true,
    html: true,
    saveHtml: true,
    embeddedScreenshots: true,
    saveAllAttempts: false,
  },

  'cypress-cucumber-preprocessor': {
    nonGlobalStepDefinitions: true,
    stepDefinitions: './cypress/e2e/stepdefinitions/',
  },

  e2e: {
    specPattern: 'cypress/e2e/**/*.feature',
    supportFile: 'cypress/support/e2e.js',
    chromeWebSecurity: false,
    experimentalRunAllSpecs: true,
    experimentalSessionAndOrigin: true,

    setupNodeEvents(on, config) {
      // reporter + cucumber
      require('cypress-mochawesome-reporter/plugin')(on);
      on('file:preprocessor', cucumber());

      // ensure downloads dir exists once
      const downloadsDir = path.join(__dirname, 'cypress', 'downloads');
      if (!fs.existsSync(downloadsDir)) fs.mkdirSync(downloadsDir, { recursive: true });

      // tasks
      on('task', {
        // Build a brand-new 58-field template (xlsx-populate)
        async 'template:build'({ outName = 'CLINICAL_INTENT.xlsx' } = {}) {
          const fullPath = await makeTemplate58FromScratch(downloadsDir, outName);
          return { outDir: downloadsDir, outName, fullPath };
        },

        // Append rows to an existing template file (xlsx-populate)
        async 'template:append'({ filePath, rows = [] }) {
          const writtenCount = await appendRows58(filePath, rows);
          return { fullPath: filePath, appended: writtenCount };
        },

        // DB passthrough
        queryDb({ query, values }) {
          return queryDb(query, values);
        },

        // Read ValidationErrors sheet (ExcelJS, read-only)
        async readErrorExcelExcelJS(fileName) {
          const filePath = path.join(downloadsDir, fileName);
          const workbook = new ExcelJS.Workbook();
          await workbook.xlsx.readFile(filePath);

          const sheet = workbook.getWorksheet('ValidationErrors') || workbook.worksheets[0];
          const rows = [];
          sheet.eachRow({ includeEmpty: false }, (row, rowNumber) => {
            if (rowNumber === 1) return; // skip header
            rows.push({
              ticketId: row.getCell(1).value,
              field: row.getCell(4).value,
              errorMessage: row.getCell(6).value,
            });
          });
          return rows;
        },
      });

      return config;
    },

    env: {
      BASE_URL: process.env.BASE_URL,
      uploadFileName: envJson.uploadFileName,
      TAGS: 'not @ignore',
    },
    retries: 1,
  },

  component: {
    setupNodeEvents(on, config) {
      return require('./cypress/plugins/index.js')(on, config);
    },
  },
});
